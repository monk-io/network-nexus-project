namespace: network-nexus-project

frontend-site:
  defines: netlify/site
  name: monk-network-nexus-project-f6v
  force_ssl: false
  secret_ref: default-netlify-pat
  permitted-secrets:
    default-netlify-pat: true
  services:
    data:
      protocol: custom

auth0:
  defines: auth0/application
  domain: <- secret("default-auth0-management-api-url")
  app-name: "Network Nexus"
  description: "Network Nexus"
  app-type: "regular_web"
  callback-url: <- $app-domain
  allowed-logout-urls:
    - <- $app-domain
  web-origins:
    - <- $app-domain
  allowed-origins:
    - <- $app-domain
  management-client-id-secret: default-auth0-management-client-id
  management-client-token-secret: default-auth0-management-client-secret
  management-api: <- "https://" secret("default-auth0-management-api-url") concat-all
  permitted-secrets:
    default-auth0-management-client-id: true
    default-auth0-management-client-secret: true
    default-auth0-management-api-url: true
  variables:
    app-domain:
      type: string
      description: Domain of the application using Auth0.
      value: <- connection-target("app") entity-state get-member("url") replace("http://", "https://")
  services:
    data:
      protocol: custom
  connections:
    app:
      runnable: network-nexus-project/frontend-site
      service: data
  depends:
    wait-for:
      runnables:
        - network-nexus-project/frontend-site
      timeout: 60

server:
  defines: runnable
  metadata:
    name: server
    description: "Node.js/TypeScript backend API for the Network Nexus application, handling user, post, connection, education, experience, and skill management. Connects to MongoDB and Redis, and uses Auth0 for authentication."
  containers:
    main:
      image: "server:latest"
  services:
    http-api:
      description: "HTTP API for the Network Nexus backend, serving user, post, connection, education, experience, and skill management endpoints."
      protocol: tcp
      port: <- $port
      publish: true
      host-port: <- $port
      container: main
  connections:
    redis:
      target: network-nexus-project/redis
      service: redis-db
    mongodb:
      target: network-nexus-project/mongodb
      service: mongodb
    auth:
      target: network-nexus-project/auth0
      service: data
  depends:
    wait-for:
      runnables:
        - network-nexus-project/redis
        - network-nexus-project/mongodb
        - network-nexus-project/auth0
      timeout: 60
  permitted-secrets:
    default-auth0-management-api-url: true
  variables:
    redis-url:
      type: string
      env: REDIS_URL
      description: URL for connecting to the Redis instance used for caching and session management.
      value: <- `redis://${redis-host}:${redis-port}`
    auth0-domain:
      type: string
      env: AUTH0_DOMAIN
      description: Auth0 domain for authentication.
      value: <- secret("default-auth0-management-api-url")
    auth0-audience:
      type: string
      env: AUTH0_AUDIENCE
      description: Auth0 audience for API authentication.
      value: <- $global-auth0-audience default("http://network-nexus.onmonk.io")
    auth0-client-id:
      type: string
      env: AUTH0_CLIENT_ID
      description: Auth0 client ID for authentication.
      value: <- connection-target("auth") entity-state get-member("client-id")
    auth0-client-secret:
      type: string
      env: AUTH0_CLIENT_SECRET
      description: Auth0 client secret for authentication.
      value: <- connection-target("auth") entity-state get-member("client-secret")
    port:
      type: int
      env: PORT
      description: Port on which the backend server listens.
      value: 4000
    redis-host:
      type: string
      env: REDIS_HOST
      description: Host for the Redis instance used for caching and session management.
      value: <- connection-hostname("redis")
    redis-port:
      type: int
      env: REDIS_PORT
      description: Port for the Redis instance used for caching and session management.
      value: <- connection-port("redis")
    mongodb-uri:
      type: string
      env: MONGODB_URI
      description: MongoDB connection URI for the bots to interact with the Network Nexus database.
      value: <- `mongodb://${mongodb-user}:${mongodb-password}@${mongodb-host}:${mongodb-port}/${mongodb-dbname}?authSource=admin&retryWrites=true&w=majority`
    mongodb-user:
      type: string
      env: MONGODB_USER
      description: Username for authenticating with the MongoDB database.
      value: <- $global-mongo-init-username default("user")
    mongodb-password:
      type: string
      env: MONGODB_PASSWORD
      description: Password for authenticating with the MongoDB database.
      value: <- $global-mongo-init-password default("password")
    mongodb-host:
      type: string
      env: MONGODB_HOST
      description: Hostname or IP address of the MongoDB server.
      value: <- connection-hostname("mongodb")
    mongodb-port:
      type: string
      env: MONGODB_PORT
      description: Port number for the MongoDB server.
      value: <- connection-port("mongodb")
    mongodb-dbname:
      type: string
      env: MONGODB_DBNAME
      description: Name of the MongoDB database to use.
      value: <- $global-mongo-init-database default("network-nexus")

bots:
  defines: runnable
  metadata:
    name: bots
    description: "Python-based simulator that creates automated bots to interact with the Network Nexus database, simulating social network activity. Connects to MongoDB and an LLM API (Ollama or compatible)."
  containers:
    main:
      image: "bots:latest"
  services: {}
  connections:
    mongodb:
      target: network-nexus-project/mongodb
      service: mongodb
    llm-api:
      target: network-nexus-project/ollama
      service: web
  depends:
    wait-for:
      runnables:
        - network-nexus-project/mongodb
        - network-nexus-project/ollama
      timeout: 60
  variables:
    mongodb-uri:
      type: string
      env: MONGODB_URI
      description: MongoDB connection URI for the bots to interact with the Network Nexus database.
      value: <- `mongodb://${mongodb-user}:${mongodb-password}@${mongodb-host}:${mongodb-port}/${mongodb-dbname}?authSource=admin&retryWrites=true&w=majority`
    llm-api-url:
      type: string
      env: LLM_API_URL
      description: URL for the LLM API (Ollama or compatible) used for generating AI content.
      value: <- `http://${llm-api-host}:${llm-api-port}`
    llm-api-key:
      type: string
      env: LLM_API_KEY
      description: API key for authenticating with the LLM API.
      value: ""
    model-name:
      type: string
      env: MODEL_NAME
      description: Name of the LLM model to use for content generation.
      value: llama3.2
    num-bots:
      type: int
      env: NUM_BOTS
      description: Number of bot accounts to simulate.
      value: 3
    tick-interval:
      type: int
      env: TICK_INTERVAL
      description: Seconds between each bot action.
      value: 5
    mongodb-user:
      type: string
      env: MONGODB_USER
      description: Username for authenticating with the MongoDB database.
      value: <- $global-mongo-init-username default("user")
    mongodb-password:
      type: string
      env: MONGODB_PASSWORD
      description: Password for authenticating with the MongoDB database.
      value: <- $global-mongo-init-password default("password")
    mongodb-host:
      type: string
      env: MONGODB_HOST
      description: Hostname or IP address of the MongoDB server.
      value: <- connection-hostname("mongodb")
    mongodb-port:
      type: string
      env: MONGODB_PORT
      description: Port number for the MongoDB server.
      value: <- connection-port("mongodb")
    mongodb-dbname:
      type: string
      env: MONGODB_DBNAME
      description: Name of the MongoDB database to use.
      value: <- $global-mongo-init-database default("network-nexus")
    llm-api-host:
      type: string
      env: LLM_API_HOST
      description: Host for the LLM API (Ollama or compatible).
      value: <- connection-hostname("llm-api")
    llm-api-port:
      type: string
      env: LLM_API_PORT
      description: Port for the LLM API (Ollama or compatible).
      value: <- connection-port("llm-api")

mongodb:
  defines: runnable
  inherits: mongodb/mongodb
  variables:
    mongo-image:
      type: string
      env: mongo-image
      description: MongoDB Docker image tag to use for the container.
      value: latest
    mongo-init-username:
      type: string
      env: MONGO_INITDB_ROOT_USERNAME
      description: Username for the MongoDB root user (used for initialization).
      value: <- $global-mongo-init-username default("mongo")
    mongo-init-database:
      type: string
      env: MONGO_INITDB_DATABASE
      description: Name of the initial database to create on startup.
      value: <- $global-mongo-init-database default("mongo")
    mongodb-image:
      type: string
      env: mongodb-image
      description: Alternative MongoDB Docker image tag (not used by default container).
      value: latest
    mongo-init-password:
      type: string
      env: MONGO_INITDB_ROOT_PASSWORD
      description: Password for the MongoDB root user (used for initialization).
      value: <- $global-mongo-init-password default("password")

redis:
  defines: runnable
  inherits: acmefit/redis-db
  variables:
    redis-password:
      type: string
      env: REDIS_PASSWORD
      description: Password for authenticating to the Redis instance.
      value: ""
    redis_empty_password:
      env: ALLOW_EMPTY_PASSWORD
      type: string
      value: "yes"

ollama:
  defines: runnable
  inherits: ollama/ollama
  affinity:
    tag: gpu

proxy:
  defines: runnable
  inherits: nginx/node-proxy
  connections:
    backend:
      target: network-nexus-project/server
      service: http-api
  depends:
    wait-for:
      runnables:
        - network-nexus-project/server
      timeout: 60

frontend:
  defines: runnable
  inherits: netlify/deploy
  containers:
    deploy:
      paths:
        - "blobs://frontend:/home/node/app"
  permitted-secrets:
    default-auth0-management-api-url: true
  variables:
    deploy-dir: dist
    site-id: <- connection-target("site") entity-state get-member("id")
    pre-deploy: |
      npm install
      npm run build
      echo '/* /index.html 200' >> dist/_redirects

    vite-api-url:
      type: string
      env: VITE_API_URL
      description: "API URL for the frontend to connect to the backend."
      value: <- "https://" connection-domain-name("backend-api") concat-all
    vite-auth0-domain:
      type: string
      env: VITE_AUTH0_DOMAIN
      description: "Auth0 domain for authentication, used by the frontend to connect to Auth0."
      value: <- secret("default-auth0-management-api-url")
    vite-auth0-client-id:
      type: string
      env: VITE_AUTH0_CLIENT_ID
      description: "Auth0 client ID for authentication, used by the frontend to connect to Auth0."
      value: <- connection-target("auth") entity-state get-member("client-id")
    vite-auth0-audience:
      type: string
      env: VITE_AUTH0_AUDIENCE
      description: "Auth0 audience for API authentication, used by the frontend to connect to Auth0."
      value: <- $global-auth0-audience default("http://network-nexus.onmonk.io")
  connections:
    site:
      target: network-nexus-project/frontend-site
      service: data
    backend-api:
      target: network-nexus-project/proxy
      service: nginx
    auth:
      target: network-nexus-project/auth0
      service: data
  depends:
    wait-for:
      runnables:
        - network-nexus-project/frontend-site
        - network-nexus-project/proxy
        - network-nexus-project/auth0
      timeout: 60

stack:
  defines: group
  variables:
    global-mongo-init-username:
      type: string
      description: Username for authenticating with the MongoDB database.
      value: network-nexus
    global-mongo-init-password:
      type: string
      description: Password for authenticating with the MongoDB database.
      value: JgDkF9Ko3c-O4JVk
    global-mongo-init-database:
      type: string
      description: Name of the MongoDB database to use.
      value: network-nexus
    global-auth0-audience:
      type: string
      description: Auth0 audience for API authentication.
      value: http://network-nexus.onmonk.io
  members:
    - network-nexus-project/frontend-site
    - network-nexus-project/auth0
    - network-nexus-project/server
    - network-nexus-project/bots
    - network-nexus-project/mongodb
    - network-nexus-project/redis
    - network-nexus-project/ollama
    - network-nexus-project/proxy
    - network-nexus-project/frontend
